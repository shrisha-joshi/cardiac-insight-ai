import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface PDFReportData {
  patientInfo: {
    name: string;
    age: number;
    gender: string;
    assessmentDate: string;
  };
  riskAssessment: {
    overallRisk: number;
    riskLevel: string;
    factors: string[];
  };
  recommendations: string[];
  reportType: 'premium' | 'professional';
  reportId: string;
}

export class PDFService {
  static async generateReport(data: PDFReportData): Promise<void> {
    const pdf = new jsPDF('p', 'mm', 'a4');
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    const margin = 20;
    let yPosition = margin;

    // Add header
    pdf.setFillColor(41, 98, 255);
    pdf.rect(0, 0, pageWidth, 30, 'F');
    
    pdf.setTextColor(255, 255, 255);
    pdf.setFontSize(24);
    pdf.setFont('helvetica', 'bold');
    
    const title = data.reportType === 'professional' 
      ? 'Professional Clinical Assessment Report'
      : 'Premium Heart Risk Assessment Report';
    
    pdf.text(title, margin, 20);
    
    // Reset text color
    pdf.setTextColor(0, 0, 0);
    yPosition = 45;

    // Patient Information
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Patient Information', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Name: ${data.patientInfo.name}`, margin, yPosition);
    yPosition += 7;
    pdf.text(`Age: ${data.patientInfo.age} years`, margin, yPosition);
    yPosition += 7;
    pdf.text(`Gender: ${data.patientInfo.gender}`, margin, yPosition);
    yPosition += 7;
    pdf.text(`Assessment Date: ${data.patientInfo.assessmentDate}`, margin, yPosition);
    yPosition += 7;
    pdf.text(`Report ID: ${data.reportId}`, margin, yPosition);
    yPosition += 15;

    // Risk Assessment
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Risk Assessment', margin, yPosition);
    yPosition += 10;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Overall Risk Score: ${data.riskAssessment.overallRisk}%`, margin, yPosition);
    yPosition += 7;
    pdf.text(`Risk Level: ${data.riskAssessment.riskLevel.toUpperCase()}`, margin, yPosition);
    yPosition += 15;

    // Risk Factors
    if (data.riskAssessment.factors.length > 0) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Key Risk Factors:', margin, yPosition);
      yPosition += 8;

      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      data.riskAssessment.factors.forEach((factor, index) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = margin;
        }
        pdf.text(`• ${factor}`, margin + 5, yPosition);
        yPosition += 6;
      });
      yPosition += 10;
    }

    // Recommendations
    if (data.recommendations.length > 0) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Recommendations:', margin, yPosition);
      yPosition += 8;

      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'normal');
      data.recommendations.forEach((recommendation, index) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = margin;
        }
        
        // Split long text into multiple lines
        const splitText = pdf.splitTextToSize(recommendation, pageWidth - 2 * margin - 10);
        splitText.forEach((line: string) => {
          if (yPosition > pageHeight - 30) {
            pdf.addPage();
            yPosition = margin;
          }
          pdf.text(`• ${line}`, margin + 5, yPosition);
          yPosition += 6;
        });
        yPosition += 2;
      });
    }

    // Footer
    const footerY = pageHeight - 15;
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'italic');
    pdf.text('This report is generated by Cardiac Insight AI for informational purposes only.', margin, footerY);
    pdf.text('Please consult with a qualified healthcare professional for medical advice.', margin, footerY + 5);

    // Generate filename
    const filename = `${data.reportType}_report_${data.reportId}_${new Date().toISOString().split('T')[0]}.pdf`;

    // Download the PDF
    pdf.save(filename);
  }

  static async generateReportFromHTML(elementId: string, filename: string): Promise<void> {
    const element = document.getElementById(elementId);
    if (!element) {
      throw new Error(`Element with ID '${elementId}' not found`);
    }

    try {
      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true,
        backgroundColor: '#ffffff'
      });

      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      
      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const imgWidth = pdfWidth - 20; // 10mm margin on each side
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      let heightLeft = imgHeight;
      let position = 10; // 10mm margin from top

      // Add first page
      pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
      heightLeft -= pdfHeight - 20;

      // Add additional pages if needed
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight + 10;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
        heightLeft -= pdfHeight - 20;
      }

      pdf.save(filename);
    } catch (error) {
      console.error('Error generating PDF:', error);
      throw new Error('Failed to generate PDF report');
    }
  }
}